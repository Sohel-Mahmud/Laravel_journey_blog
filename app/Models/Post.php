<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Post extends Model
{
    use HasFactory;

    //can't push any entry given on guarded array
    protected $guarded = [];

    // for eager loading, so that multiple sql query is avoided
    protected  $with = ['category', 'author'];

    /*
    this is used for slug based routing, can be used alternatively
    instead of Route::get('posts/{post:slug}' function(..){})
    */
    public function getRouteKeyName()
    {
        return 'slug'; // TODO: Change the autogenerated stub
    }

    /// this is query scope, scope is the name Filter is the name of the
    /// method, so scopeFilter,
    public function scopeFilter($query, array $filters)
    {

        $query->when($filters['search'] ?? false, function ($query, $search) {

            $query->where('title', 'like', '%' . $search . '%')
                ->orWhere('body', 'like', '%' . $search . '%');
        });

        /*
        select * from posts
        where exists (select * from categories where categories.id = posts.category_id and category.slug = 'slug-name')
        */

        $query->when(
            $filters['category'] ?? false,
            fn ($query, $category) =>
            /* $query->whereExists(fn ($query) =>
            $query->from('categories')
                ->whereColumn('categories.id', 'posts.category_id')
                ->where('categories.slug', $category)) */
            $query->whereHas('category', fn ($query) => $query->where('slug', $category))
        );

        $query->when(
            $filters['author'] ?? false,
            fn ($query, $author) =>
            /* $query->whereExists(fn ($query) =>
            $query->from('categories')
                ->whereColumn('categories.id', 'posts.category_id')
                ->where('categories.slug', $category)) */
            $query->whereHas('author', fn ($query) => $query->where('username', $author))
        );

        /**
         * now you can filter like this
         * /?author=authorname&search=searchtitle&category=categoryname
         */
    }

    //for relation
    public function category() //this means it will look for category_id in db
    {
        // hasOne, hasMany, belongsTo, belongsToMany
        return $this->belongsTo(Category::class);
    }

    /// to change user to author as user means user_id,
    /// we needs to pass a second argument on belongsTo
    public function author()
    {
        return $this->belongsTo(User::class, 'user_id');
    }
}
